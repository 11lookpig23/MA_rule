pipeline: ====>
目标， 模块化+规范化，使得更多的时间用于实现自己的想法而不是与各种枯燥调code做斗争

software requirements:

Test & Result:
1. reward's convergence
    1.1 保存训练时reward的数据
    1.2 画出收敛图并且保存
    1.3 保存测试时的reward数据，并且算出平均的reward表现
    1.4 细分至每一个agent(opt)
2. Settings
    2.1 单独做一个文件或函数作为配置，且写好注释
    2.2 把需要的函数参数全部列出，包括是否保存图，数据，神经网络参数，marl设置，文件名
        小规模测试时的参数，是否Load，分个类，需保存，以方便溯源复现
    2.3 储存设置到一个文件里方便复现
3. 数据衔接
    3.1 配置好环境输出与各种tensor的配合，每个agent需要有自己的函数，单独为一个文件

4. 模型
    4.1 模块化，如有其它人的代码，尽可能通用，可方便调用，修订适中
    4.2 因为需要各种调整已有的代码，所以将不易调整的部分分开，调整频繁的部分尽量单独拿出，并且通用化
        设计各种接口，方便各种调整。

5. 参数储存
    5.1 尽可能高效，即用最少的储存空间，存储最有用的参数
    5.2 文件设置查找方便，文件名直观，需要设计一个方便的文件名构建方法


文件系统
    1. 训练参数文件夹
        train-parameter
         - stage1
         - stage2 
            - env
                -expFordifferIdea/model
                  - file_name: 体现参数的重要不同，控制保存数量
    2. Differ-ENV
        - env1
        ...
    3. Differ-model
        - model1
        ...
    4. 保存res
        - env1
            -figure
            -data
        - env2
        ...


